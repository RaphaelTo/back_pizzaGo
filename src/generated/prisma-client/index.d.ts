// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  category: (where?: CategoryWhereInput) => Promise<boolean>;
  dessert: (where?: DessertWhereInput) => Promise<boolean>;
  drink: (where?: DrinkWhereInput) => Promise<boolean>;
  order: (where?: OrderWhereInput) => Promise<boolean>;
  pizza: (where?: PizzaWhereInput) => Promise<boolean>;
  promo: (where?: PromoWhereInput) => Promise<boolean>;
  size: (where?: SizeWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  category: (where: CategoryWhereUniqueInput) => CategoryNullablePromise;
  categories: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Category>;
  categoriesConnection: (args?: {
    where?: CategoryWhereInput;
    orderBy?: CategoryOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CategoryConnectionPromise;
  dessert: (where: DessertWhereUniqueInput) => DessertNullablePromise;
  desserts: (args?: {
    where?: DessertWhereInput;
    orderBy?: DessertOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Dessert>;
  dessertsConnection: (args?: {
    where?: DessertWhereInput;
    orderBy?: DessertOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DessertConnectionPromise;
  drink: (where: DrinkWhereUniqueInput) => DrinkNullablePromise;
  drinks: (args?: {
    where?: DrinkWhereInput;
    orderBy?: DrinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Drink>;
  drinksConnection: (args?: {
    where?: DrinkWhereInput;
    orderBy?: DrinkOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DrinkConnectionPromise;
  order: (where: OrderWhereUniqueInput) => OrderNullablePromise;
  orders: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Order>;
  ordersConnection: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrderConnectionPromise;
  pizza: (where: PizzaWhereUniqueInput) => PizzaNullablePromise;
  pizzas: (args?: {
    where?: PizzaWhereInput;
    orderBy?: PizzaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Pizza>;
  pizzasConnection: (args?: {
    where?: PizzaWhereInput;
    orderBy?: PizzaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PizzaConnectionPromise;
  promo: (where: PromoWhereUniqueInput) => PromoNullablePromise;
  promoes: (args?: {
    where?: PromoWhereInput;
    orderBy?: PromoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Promo>;
  promoesConnection: (args?: {
    where?: PromoWhereInput;
    orderBy?: PromoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PromoConnectionPromise;
  size: (where: SizeWhereUniqueInput) => SizeNullablePromise;
  sizes: (args?: {
    where?: SizeWhereInput;
    orderBy?: SizeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Size>;
  sizesConnection: (args?: {
    where?: SizeWhereInput;
    orderBy?: SizeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SizeConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCategory: (data: CategoryCreateInput) => CategoryPromise;
  updateCategory: (args: {
    data: CategoryUpdateInput;
    where: CategoryWhereUniqueInput;
  }) => CategoryPromise;
  updateManyCategories: (args: {
    data: CategoryUpdateManyMutationInput;
    where?: CategoryWhereInput;
  }) => BatchPayloadPromise;
  upsertCategory: (args: {
    where: CategoryWhereUniqueInput;
    create: CategoryCreateInput;
    update: CategoryUpdateInput;
  }) => CategoryPromise;
  deleteCategory: (where: CategoryWhereUniqueInput) => CategoryPromise;
  deleteManyCategories: (where?: CategoryWhereInput) => BatchPayloadPromise;
  createDessert: (data: DessertCreateInput) => DessertPromise;
  updateDessert: (args: {
    data: DessertUpdateInput;
    where: DessertWhereUniqueInput;
  }) => DessertPromise;
  updateManyDesserts: (args: {
    data: DessertUpdateManyMutationInput;
    where?: DessertWhereInput;
  }) => BatchPayloadPromise;
  upsertDessert: (args: {
    where: DessertWhereUniqueInput;
    create: DessertCreateInput;
    update: DessertUpdateInput;
  }) => DessertPromise;
  deleteDessert: (where: DessertWhereUniqueInput) => DessertPromise;
  deleteManyDesserts: (where?: DessertWhereInput) => BatchPayloadPromise;
  createDrink: (data: DrinkCreateInput) => DrinkPromise;
  updateDrink: (args: {
    data: DrinkUpdateInput;
    where: DrinkWhereUniqueInput;
  }) => DrinkPromise;
  updateManyDrinks: (args: {
    data: DrinkUpdateManyMutationInput;
    where?: DrinkWhereInput;
  }) => BatchPayloadPromise;
  upsertDrink: (args: {
    where: DrinkWhereUniqueInput;
    create: DrinkCreateInput;
    update: DrinkUpdateInput;
  }) => DrinkPromise;
  deleteDrink: (where: DrinkWhereUniqueInput) => DrinkPromise;
  deleteManyDrinks: (where?: DrinkWhereInput) => BatchPayloadPromise;
  createOrder: (data: OrderCreateInput) => OrderPromise;
  updateOrder: (args: {
    data: OrderUpdateInput;
    where: OrderWhereUniqueInput;
  }) => OrderPromise;
  updateManyOrders: (args: {
    data: OrderUpdateManyMutationInput;
    where?: OrderWhereInput;
  }) => BatchPayloadPromise;
  upsertOrder: (args: {
    where: OrderWhereUniqueInput;
    create: OrderCreateInput;
    update: OrderUpdateInput;
  }) => OrderPromise;
  deleteOrder: (where: OrderWhereUniqueInput) => OrderPromise;
  deleteManyOrders: (where?: OrderWhereInput) => BatchPayloadPromise;
  createPizza: (data: PizzaCreateInput) => PizzaPromise;
  updatePizza: (args: {
    data: PizzaUpdateInput;
    where: PizzaWhereUniqueInput;
  }) => PizzaPromise;
  updateManyPizzas: (args: {
    data: PizzaUpdateManyMutationInput;
    where?: PizzaWhereInput;
  }) => BatchPayloadPromise;
  upsertPizza: (args: {
    where: PizzaWhereUniqueInput;
    create: PizzaCreateInput;
    update: PizzaUpdateInput;
  }) => PizzaPromise;
  deletePizza: (where: PizzaWhereUniqueInput) => PizzaPromise;
  deleteManyPizzas: (where?: PizzaWhereInput) => BatchPayloadPromise;
  createPromo: (data: PromoCreateInput) => PromoPromise;
  updatePromo: (args: {
    data: PromoUpdateInput;
    where: PromoWhereUniqueInput;
  }) => PromoPromise;
  updateManyPromoes: (args: {
    data: PromoUpdateManyMutationInput;
    where?: PromoWhereInput;
  }) => BatchPayloadPromise;
  upsertPromo: (args: {
    where: PromoWhereUniqueInput;
    create: PromoCreateInput;
    update: PromoUpdateInput;
  }) => PromoPromise;
  deletePromo: (where: PromoWhereUniqueInput) => PromoPromise;
  deleteManyPromoes: (where?: PromoWhereInput) => BatchPayloadPromise;
  createSize: (data: SizeCreateInput) => SizePromise;
  updateSize: (args: {
    data: SizeUpdateInput;
    where: SizeWhereUniqueInput;
  }) => SizePromise;
  updateManySizes: (args: {
    data: SizeUpdateManyMutationInput;
    where?: SizeWhereInput;
  }) => BatchPayloadPromise;
  upsertSize: (args: {
    where: SizeWhereUniqueInput;
    create: SizeCreateInput;
    update: SizeUpdateInput;
  }) => SizePromise;
  deleteSize: (where: SizeWhereUniqueInput) => SizePromise;
  deleteManySizes: (where?: SizeWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  category: (
    where?: CategorySubscriptionWhereInput
  ) => CategorySubscriptionPayloadSubscription;
  dessert: (
    where?: DessertSubscriptionWhereInput
  ) => DessertSubscriptionPayloadSubscription;
  drink: (
    where?: DrinkSubscriptionWhereInput
  ) => DrinkSubscriptionPayloadSubscription;
  order: (
    where?: OrderSubscriptionWhereInput
  ) => OrderSubscriptionPayloadSubscription;
  pizza: (
    where?: PizzaSubscriptionWhereInput
  ) => PizzaSubscriptionPayloadSubscription;
  promo: (
    where?: PromoSubscriptionWhereInput
  ) => PromoSubscriptionPayloadSubscription;
  size: (
    where?: SizeSubscriptionWhereInput
  ) => SizeSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type DessertOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "price_ASC"
  | "price_DESC"
  | "name_ASC"
  | "name_DESC"
  | "img_ASC"
  | "img_DESC";

export type DrinkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "price_ASC"
  | "price_DESC"
  | "name_ASC"
  | "name_DESC"
  | "oz_ASC"
  | "oz_DESC"
  | "img_ASC"
  | "img_DESC";

export type OrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "price_ASC"
  | "price_DESC"
  | "date_ASC"
  | "date_DESC"
  | "status_ASC"
  | "status_DESC"
  | "content_ASC"
  | "content_DESC";

export type PizzaOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "img_ASC"
  | "img_DESC"
  | "composition_ASC"
  | "composition_DESC";

export type PromoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "amount_ASC"
  | "amount_DESC";

export type CategoryOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC";

export type SizeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "price_ASC"
  | "price_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstname_ASC"
  | "firstname_DESC"
  | "lastname_ASC"
  | "lastname_DESC"
  | "address_ASC"
  | "address_DESC"
  | "zip_ASC"
  | "zip_DESC"
  | "city_ASC"
  | "city_DESC"
  | "tel_ASC"
  | "tel_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "tokenActivate_ASC"
  | "tokenActivate_DESC"
  | "tokenResetPassword_ASC"
  | "tokenResetPassword_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface CategoryCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export type CategoryWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PizzaWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  img?: Maybe<String>;
  img_not?: Maybe<String>;
  img_in?: Maybe<String[] | String>;
  img_not_in?: Maybe<String[] | String>;
  img_lt?: Maybe<String>;
  img_lte?: Maybe<String>;
  img_gt?: Maybe<String>;
  img_gte?: Maybe<String>;
  img_contains?: Maybe<String>;
  img_not_contains?: Maybe<String>;
  img_starts_with?: Maybe<String>;
  img_not_starts_with?: Maybe<String>;
  img_ends_with?: Maybe<String>;
  img_not_ends_with?: Maybe<String>;
  category?: Maybe<CategoryWhereInput>;
  AND?: Maybe<PizzaWhereInput[] | PizzaWhereInput>;
  OR?: Maybe<PizzaWhereInput[] | PizzaWhereInput>;
  NOT?: Maybe<PizzaWhereInput[] | PizzaWhereInput>;
}

export interface DessertUpdateManyMutationInput {
  price?: Maybe<Float>;
  name?: Maybe<String>;
  img?: Maybe<String>;
}

export interface PizzaCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  img: String;
  composition: Json;
  category?: Maybe<CategoryCreateOneInput>;
}

export interface DessertCreateInput {
  id?: Maybe<ID_Input>;
  price: Float;
  name: String;
  img: String;
}

export interface OrderUpdateManyMutationInput {
  price?: Maybe<Float>;
  status?: Maybe<Float>;
  content?: Maybe<Json>;
}

export interface SizeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SizeWhereInput>;
  AND?: Maybe<SizeSubscriptionWhereInput[] | SizeSubscriptionWhereInput>;
  OR?: Maybe<SizeSubscriptionWhereInput[] | SizeSubscriptionWhereInput>;
  NOT?: Maybe<SizeSubscriptionWhereInput[] | SizeSubscriptionWhereInput>;
}

export interface PromoUpsertNestedInput {
  update: PromoUpdateDataInput;
  create: PromoCreateInput;
}

export interface PromoSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PromoWhereInput>;
  AND?: Maybe<PromoSubscriptionWhereInput[] | PromoSubscriptionWhereInput>;
  OR?: Maybe<PromoSubscriptionWhereInput[] | PromoSubscriptionWhereInput>;
  NOT?: Maybe<PromoSubscriptionWhereInput[] | PromoSubscriptionWhereInput>;
}

export interface PromoUpdateDataInput {
  name?: Maybe<String>;
  amount?: Maybe<Int>;
}

export interface OrderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrderWhereInput>;
  AND?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
  OR?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
  NOT?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
}

export type PromoWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type DrinkWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PromoUpdateOneInput {
  create?: Maybe<PromoCreateInput>;
  update?: Maybe<PromoUpdateDataInput>;
  upsert?: Maybe<PromoUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PromoWhereUniqueInput>;
}

export interface DrinkWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  oz?: Maybe<Float>;
  oz_not?: Maybe<Float>;
  oz_in?: Maybe<Float[] | Float>;
  oz_not_in?: Maybe<Float[] | Float>;
  oz_lt?: Maybe<Float>;
  oz_lte?: Maybe<Float>;
  oz_gt?: Maybe<Float>;
  oz_gte?: Maybe<Float>;
  img?: Maybe<String>;
  img_not?: Maybe<String>;
  img_in?: Maybe<String[] | String>;
  img_not_in?: Maybe<String[] | String>;
  img_lt?: Maybe<String>;
  img_lte?: Maybe<String>;
  img_gt?: Maybe<String>;
  img_gte?: Maybe<String>;
  img_contains?: Maybe<String>;
  img_not_contains?: Maybe<String>;
  img_starts_with?: Maybe<String>;
  img_not_starts_with?: Maybe<String>;
  img_ends_with?: Maybe<String>;
  img_not_ends_with?: Maybe<String>;
  AND?: Maybe<DrinkWhereInput[] | DrinkWhereInput>;
  OR?: Maybe<DrinkWhereInput[] | DrinkWhereInput>;
  NOT?: Maybe<DrinkWhereInput[] | DrinkWhereInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserUpdateManyMutationInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  address?: Maybe<String>;
  zip?: Maybe<Int>;
  city?: Maybe<String>;
  tel?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<UserUpdateroleInput>;
  tokenActivate?: Maybe<String>;
  tokenResetPassword?: Maybe<String>;
}

export interface UserUpdateroleInput {
  set?: Maybe<String[] | String>;
}

export interface SizeUpdateManyMutationInput {
  name?: Maybe<String>;
  price?: Maybe<Float>;
}

export interface UserUpdateDataInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  address?: Maybe<String>;
  zip?: Maybe<Int>;
  city?: Maybe<String>;
  tel?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<UserUpdateroleInput>;
  tokenActivate?: Maybe<String>;
  tokenResetPassword?: Maybe<String>;
}

export interface SizeUpdateInput {
  name?: Maybe<String>;
  price?: Maybe<Float>;
}

export type SizeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PromoUpdateManyMutationInput {
  name?: Maybe<String>;
  amount?: Maybe<Int>;
}

export interface UserUpdateOneInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface PizzaUpdateManyMutationInput {
  name?: Maybe<String>;
  img?: Maybe<String>;
  composition?: Maybe<Json>;
}

export interface SizeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  AND?: Maybe<SizeWhereInput[] | SizeWhereInput>;
  OR?: Maybe<SizeWhereInput[] | SizeWhereInput>;
  NOT?: Maybe<SizeWhereInput[] | SizeWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstname?: Maybe<String>;
  firstname_not?: Maybe<String>;
  firstname_in?: Maybe<String[] | String>;
  firstname_not_in?: Maybe<String[] | String>;
  firstname_lt?: Maybe<String>;
  firstname_lte?: Maybe<String>;
  firstname_gt?: Maybe<String>;
  firstname_gte?: Maybe<String>;
  firstname_contains?: Maybe<String>;
  firstname_not_contains?: Maybe<String>;
  firstname_starts_with?: Maybe<String>;
  firstname_not_starts_with?: Maybe<String>;
  firstname_ends_with?: Maybe<String>;
  firstname_not_ends_with?: Maybe<String>;
  lastname?: Maybe<String>;
  lastname_not?: Maybe<String>;
  lastname_in?: Maybe<String[] | String>;
  lastname_not_in?: Maybe<String[] | String>;
  lastname_lt?: Maybe<String>;
  lastname_lte?: Maybe<String>;
  lastname_gt?: Maybe<String>;
  lastname_gte?: Maybe<String>;
  lastname_contains?: Maybe<String>;
  lastname_not_contains?: Maybe<String>;
  lastname_starts_with?: Maybe<String>;
  lastname_not_starts_with?: Maybe<String>;
  lastname_ends_with?: Maybe<String>;
  lastname_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  zip?: Maybe<Int>;
  zip_not?: Maybe<Int>;
  zip_in?: Maybe<Int[] | Int>;
  zip_not_in?: Maybe<Int[] | Int>;
  zip_lt?: Maybe<Int>;
  zip_lte?: Maybe<Int>;
  zip_gt?: Maybe<Int>;
  zip_gte?: Maybe<Int>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  tel?: Maybe<String>;
  tel_not?: Maybe<String>;
  tel_in?: Maybe<String[] | String>;
  tel_not_in?: Maybe<String[] | String>;
  tel_lt?: Maybe<String>;
  tel_lte?: Maybe<String>;
  tel_gt?: Maybe<String>;
  tel_gte?: Maybe<String>;
  tel_contains?: Maybe<String>;
  tel_not_contains?: Maybe<String>;
  tel_starts_with?: Maybe<String>;
  tel_not_starts_with?: Maybe<String>;
  tel_ends_with?: Maybe<String>;
  tel_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  tokenActivate?: Maybe<String>;
  tokenActivate_not?: Maybe<String>;
  tokenActivate_in?: Maybe<String[] | String>;
  tokenActivate_not_in?: Maybe<String[] | String>;
  tokenActivate_lt?: Maybe<String>;
  tokenActivate_lte?: Maybe<String>;
  tokenActivate_gt?: Maybe<String>;
  tokenActivate_gte?: Maybe<String>;
  tokenActivate_contains?: Maybe<String>;
  tokenActivate_not_contains?: Maybe<String>;
  tokenActivate_starts_with?: Maybe<String>;
  tokenActivate_not_starts_with?: Maybe<String>;
  tokenActivate_ends_with?: Maybe<String>;
  tokenActivate_not_ends_with?: Maybe<String>;
  tokenResetPassword?: Maybe<String>;
  tokenResetPassword_not?: Maybe<String>;
  tokenResetPassword_in?: Maybe<String[] | String>;
  tokenResetPassword_not_in?: Maybe<String[] | String>;
  tokenResetPassword_lt?: Maybe<String>;
  tokenResetPassword_lte?: Maybe<String>;
  tokenResetPassword_gt?: Maybe<String>;
  tokenResetPassword_gte?: Maybe<String>;
  tokenResetPassword_contains?: Maybe<String>;
  tokenResetPassword_not_contains?: Maybe<String>;
  tokenResetPassword_starts_with?: Maybe<String>;
  tokenResetPassword_not_starts_with?: Maybe<String>;
  tokenResetPassword_ends_with?: Maybe<String>;
  tokenResetPassword_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface CategoryWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  OR?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
  NOT?: Maybe<CategoryWhereInput[] | CategoryWhereInput>;
}

export interface CategoryUpsertNestedInput {
  update: CategoryUpdateDataInput;
  create: CategoryCreateInput;
}

export interface OrderUpdateInput {
  price?: Maybe<Float>;
  status?: Maybe<Float>;
  user?: Maybe<UserUpdateOneInput>;
  content?: Maybe<Json>;
  promo?: Maybe<PromoUpdateOneInput>;
}

export interface CategoryUpdateOneInput {
  create?: Maybe<CategoryCreateInput>;
  update?: Maybe<CategoryUpdateDataInput>;
  upsert?: Maybe<CategoryUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CategoryWhereUniqueInput>;
}

export interface PromoCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  amount: Int;
}

export type PizzaWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PromoCreateOneInput {
  create?: Maybe<PromoCreateInput>;
  connect?: Maybe<PromoWhereUniqueInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PizzaSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PizzaWhereInput>;
  AND?: Maybe<PizzaSubscriptionWhereInput[] | PizzaSubscriptionWhereInput>;
  OR?: Maybe<PizzaSubscriptionWhereInput[] | PizzaSubscriptionWhereInput>;
  NOT?: Maybe<PizzaSubscriptionWhereInput[] | PizzaSubscriptionWhereInput>;
}

export interface UserCreateroleInput {
  set?: Maybe<String[] | String>;
}

export interface DessertSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DessertWhereInput>;
  AND?: Maybe<DessertSubscriptionWhereInput[] | DessertSubscriptionWhereInput>;
  OR?: Maybe<DessertSubscriptionWhereInput[] | DessertSubscriptionWhereInput>;
  NOT?: Maybe<DessertSubscriptionWhereInput[] | DessertSubscriptionWhereInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  firstname: String;
  lastname: String;
  address: String;
  zip: Int;
  city: String;
  tel: String;
  email: String;
  password: String;
  role?: Maybe<UserCreateroleInput>;
  tokenActivate?: Maybe<String>;
  tokenResetPassword?: Maybe<String>;
}

export interface UserUpdateInput {
  firstname?: Maybe<String>;
  lastname?: Maybe<String>;
  address?: Maybe<String>;
  zip?: Maybe<Int>;
  city?: Maybe<String>;
  tel?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  role?: Maybe<UserUpdateroleInput>;
  tokenActivate?: Maybe<String>;
  tokenResetPassword?: Maybe<String>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface SizeCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  price: Float;
}

export interface OrderCreateInput {
  id?: Maybe<ID_Input>;
  price: Float;
  status?: Maybe<Float>;
  user?: Maybe<UserCreateOneInput>;
  content: Json;
  promo?: Maybe<PromoCreateOneInput>;
}

export interface OrderWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  date?: Maybe<DateTimeInput>;
  date_not?: Maybe<DateTimeInput>;
  date_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  date_lt?: Maybe<DateTimeInput>;
  date_lte?: Maybe<DateTimeInput>;
  date_gt?: Maybe<DateTimeInput>;
  date_gte?: Maybe<DateTimeInput>;
  status?: Maybe<Float>;
  status_not?: Maybe<Float>;
  status_in?: Maybe<Float[] | Float>;
  status_not_in?: Maybe<Float[] | Float>;
  status_lt?: Maybe<Float>;
  status_lte?: Maybe<Float>;
  status_gt?: Maybe<Float>;
  status_gte?: Maybe<Float>;
  user?: Maybe<UserWhereInput>;
  promo?: Maybe<PromoWhereInput>;
  AND?: Maybe<OrderWhereInput[] | OrderWhereInput>;
  OR?: Maybe<OrderWhereInput[] | OrderWhereInput>;
  NOT?: Maybe<OrderWhereInput[] | OrderWhereInput>;
}

export interface CategoryUpdateDataInput {
  name?: Maybe<String>;
}

export interface CategoryCreateOneInput {
  create?: Maybe<CategoryCreateInput>;
  connect?: Maybe<CategoryWhereUniqueInput>;
}

export interface DrinkUpdateManyMutationInput {
  price?: Maybe<Float>;
  name?: Maybe<String>;
  oz?: Maybe<Float>;
  img?: Maybe<String>;
}

export interface DrinkSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<DrinkWhereInput>;
  AND?: Maybe<DrinkSubscriptionWhereInput[] | DrinkSubscriptionWhereInput>;
  OR?: Maybe<DrinkSubscriptionWhereInput[] | DrinkSubscriptionWhereInput>;
  NOT?: Maybe<DrinkSubscriptionWhereInput[] | DrinkSubscriptionWhereInput>;
}

export interface CategoryUpdateInput {
  name?: Maybe<String>;
}

export type OrderWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface CategoryUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface PromoWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  amount?: Maybe<Int>;
  amount_not?: Maybe<Int>;
  amount_in?: Maybe<Int[] | Int>;
  amount_not_in?: Maybe<Int[] | Int>;
  amount_lt?: Maybe<Int>;
  amount_lte?: Maybe<Int>;
  amount_gt?: Maybe<Int>;
  amount_gte?: Maybe<Int>;
  AND?: Maybe<PromoWhereInput[] | PromoWhereInput>;
  OR?: Maybe<PromoWhereInput[] | PromoWhereInput>;
  NOT?: Maybe<PromoWhereInput[] | PromoWhereInput>;
}

export interface DessertUpdateInput {
  price?: Maybe<Float>;
  name?: Maybe<String>;
  img?: Maybe<String>;
}

export type DessertWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface DrinkCreateInput {
  id?: Maybe<ID_Input>;
  price: Float;
  name: String;
  oz: Float;
  img: String;
}

export interface DrinkUpdateInput {
  price?: Maybe<Float>;
  name?: Maybe<String>;
  oz?: Maybe<Float>;
  img?: Maybe<String>;
}

export interface PizzaUpdateInput {
  name?: Maybe<String>;
  img?: Maybe<String>;
  composition?: Maybe<Json>;
  category?: Maybe<CategoryUpdateOneInput>;
}

export interface PromoUpdateInput {
  name?: Maybe<String>;
  amount?: Maybe<Int>;
}

export interface CategorySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CategoryWhereInput>;
  AND?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
  OR?: Maybe<CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput>;
  NOT?: Maybe<
    CategorySubscriptionWhereInput[] | CategorySubscriptionWhereInput
  >;
}

export interface DessertWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  img?: Maybe<String>;
  img_not?: Maybe<String>;
  img_in?: Maybe<String[] | String>;
  img_not_in?: Maybe<String[] | String>;
  img_lt?: Maybe<String>;
  img_lte?: Maybe<String>;
  img_gt?: Maybe<String>;
  img_gte?: Maybe<String>;
  img_contains?: Maybe<String>;
  img_not_contains?: Maybe<String>;
  img_starts_with?: Maybe<String>;
  img_not_starts_with?: Maybe<String>;
  img_ends_with?: Maybe<String>;
  img_not_ends_with?: Maybe<String>;
  AND?: Maybe<DessertWhereInput[] | DessertWhereInput>;
  OR?: Maybe<DessertWhereInput[] | DessertWhereInput>;
  NOT?: Maybe<DessertWhereInput[] | DessertWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstname: String;
  lastname: String;
  address: String;
  zip: Int;
  city: String;
  tel: String;
  email: String;
  password: String;
  role: String[];
  tokenActivate?: String;
  tokenResetPassword?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  address: () => Promise<String>;
  zip: () => Promise<Int>;
  city: () => Promise<String>;
  tel: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<String[]>;
  tokenActivate: () => Promise<String>;
  tokenResetPassword: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<Int>>;
  city: () => Promise<AsyncIterator<String>>;
  tel: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<String[]>>;
  tokenActivate: () => Promise<AsyncIterator<String>>;
  tokenResetPassword: () => Promise<AsyncIterator<String>>;
}

export interface Order {
  id: ID_Output;
  price: Float;
  date: DateTimeOutput;
  status: Float;
  content: Json;
}

export interface OrderPromise extends Promise<Order>, Fragmentable {
  id: () => Promise<ID_Output>;
  price: () => Promise<Float>;
  date: () => Promise<DateTimeOutput>;
  status: () => Promise<Float>;
  user: <T = UserPromise>() => T;
  content: () => Promise<Json>;
  promo: <T = PromoPromise>() => T;
}

export interface OrderSubscription
  extends Promise<AsyncIterator<Order>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  price: () => Promise<AsyncIterator<Float>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<Float>>;
  user: <T = UserSubscription>() => T;
  content: () => Promise<AsyncIterator<Json>>;
  promo: <T = PromoSubscription>() => T;
}

export interface OrderNullablePromise
  extends Promise<Order | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  price: () => Promise<Float>;
  date: () => Promise<DateTimeOutput>;
  status: () => Promise<Float>;
  user: <T = UserPromise>() => T;
  content: () => Promise<Json>;
  promo: <T = PromoPromise>() => T;
}

export interface AggregateCategory {
  count: Int;
}

export interface AggregateCategoryPromise
  extends Promise<AggregateCategory>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCategorySubscription
  extends Promise<AsyncIterator<AggregateCategory>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  firstname: String;
  lastname: String;
  address: String;
  zip: Int;
  city: String;
  tel: String;
  email: String;
  password: String;
  role: String[];
  tokenActivate?: String;
  tokenResetPassword?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  address: () => Promise<String>;
  zip: () => Promise<Int>;
  city: () => Promise<String>;
  tel: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<String[]>;
  tokenActivate: () => Promise<String>;
  tokenResetPassword: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstname: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  zip: () => Promise<AsyncIterator<Int>>;
  city: () => Promise<AsyncIterator<String>>;
  tel: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<String[]>>;
  tokenActivate: () => Promise<AsyncIterator<String>>;
  tokenResetPassword: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstname: () => Promise<String>;
  lastname: () => Promise<String>;
  address: () => Promise<String>;
  zip: () => Promise<Int>;
  city: () => Promise<String>;
  tel: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  role: () => Promise<String[]>;
  tokenActivate: () => Promise<String>;
  tokenResetPassword: () => Promise<String>;
}

export interface PromoSubscriptionPayload {
  mutation: MutationType;
  node: Promo;
  updatedFields: String[];
  previousValues: PromoPreviousValues;
}

export interface PromoSubscriptionPayloadPromise
  extends Promise<PromoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PromoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PromoPreviousValuesPromise>() => T;
}

export interface PromoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PromoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PromoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PromoPreviousValuesSubscription>() => T;
}

export interface SizeSubscriptionPayload {
  mutation: MutationType;
  node: Size;
  updatedFields: String[];
  previousValues: SizePreviousValues;
}

export interface SizeSubscriptionPayloadPromise
  extends Promise<SizeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SizePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SizePreviousValuesPromise>() => T;
}

export interface SizeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SizeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SizeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SizePreviousValuesSubscription>() => T;
}

export interface AggregateDrink {
  count: Int;
}

export interface AggregateDrinkPromise
  extends Promise<AggregateDrink>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDrinkSubscription
  extends Promise<AsyncIterator<AggregateDrink>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateSize {
  count: Int;
}

export interface AggregateSizePromise
  extends Promise<AggregateSize>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSizeSubscription
  extends Promise<AsyncIterator<AggregateSize>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DrinkEdge {
  node: Drink;
  cursor: String;
}

export interface DrinkEdgePromise extends Promise<DrinkEdge>, Fragmentable {
  node: <T = DrinkPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DrinkEdgeSubscription
  extends Promise<AsyncIterator<DrinkEdge>>,
    Fragmentable {
  node: <T = DrinkSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SizeConnection {
  pageInfo: PageInfo;
  edges: SizeEdge[];
}

export interface SizeConnectionPromise
  extends Promise<SizeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SizeEdge>>() => T;
  aggregate: <T = AggregateSizePromise>() => T;
}

export interface SizeConnectionSubscription
  extends Promise<AsyncIterator<SizeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SizeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSizeSubscription>() => T;
}

export interface DrinkConnection {
  pageInfo: PageInfo;
  edges: DrinkEdge[];
}

export interface DrinkConnectionPromise
  extends Promise<DrinkConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DrinkEdge>>() => T;
  aggregate: <T = AggregateDrinkPromise>() => T;
}

export interface DrinkConnectionSubscription
  extends Promise<AsyncIterator<DrinkConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DrinkEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDrinkSubscription>() => T;
}

export interface AggregatePromo {
  count: Int;
}

export interface AggregatePromoPromise
  extends Promise<AggregatePromo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePromoSubscription
  extends Promise<AsyncIterator<AggregatePromo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PromoPreviousValues {
  id: ID_Output;
  name: String;
  amount: Int;
}

export interface PromoPreviousValuesPromise
  extends Promise<PromoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  amount: () => Promise<Int>;
}

export interface PromoPreviousValuesSubscription
  extends Promise<AsyncIterator<PromoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  amount: () => Promise<AsyncIterator<Int>>;
}

export interface PromoConnection {
  pageInfo: PageInfo;
  edges: PromoEdge[];
}

export interface PromoConnectionPromise
  extends Promise<PromoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PromoEdge>>() => T;
  aggregate: <T = AggregatePromoPromise>() => T;
}

export interface PromoConnectionSubscription
  extends Promise<AsyncIterator<PromoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PromoEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePromoSubscription>() => T;
}

export interface Category {
  id: ID_Output;
  name: String;
}

export interface CategoryPromise extends Promise<Category>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CategorySubscription
  extends Promise<AsyncIterator<Category>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface CategoryNullablePromise
  extends Promise<Category | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface AggregatePizza {
  count: Int;
}

export interface AggregatePizzaPromise
  extends Promise<AggregatePizza>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePizzaSubscription
  extends Promise<AsyncIterator<AggregatePizza>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CategorySubscriptionPayload {
  mutation: MutationType;
  node: Category;
  updatedFields: String[];
  previousValues: CategoryPreviousValues;
}

export interface CategorySubscriptionPayloadPromise
  extends Promise<CategorySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CategoryPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CategoryPreviousValuesPromise>() => T;
}

export interface CategorySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CategorySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CategorySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CategoryPreviousValuesSubscription>() => T;
}

export interface PizzaConnection {
  pageInfo: PageInfo;
  edges: PizzaEdge[];
}

export interface PizzaConnectionPromise
  extends Promise<PizzaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PizzaEdge>>() => T;
  aggregate: <T = AggregatePizzaPromise>() => T;
}

export interface PizzaConnectionSubscription
  extends Promise<AsyncIterator<PizzaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PizzaEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePizzaSubscription>() => T;
}

export interface CategoryPreviousValues {
  id: ID_Output;
  name: String;
}

export interface CategoryPreviousValuesPromise
  extends Promise<CategoryPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CategoryPreviousValuesSubscription
  extends Promise<AsyncIterator<CategoryPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface Pizza {
  id: ID_Output;
  name: String;
  img: String;
  composition: Json;
}

export interface PizzaPromise extends Promise<Pizza>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  img: () => Promise<String>;
  composition: () => Promise<Json>;
  category: <T = CategoryPromise>() => T;
}

export interface PizzaSubscription
  extends Promise<AsyncIterator<Pizza>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  img: () => Promise<AsyncIterator<String>>;
  composition: () => Promise<AsyncIterator<Json>>;
  category: <T = CategorySubscription>() => T;
}

export interface PizzaNullablePromise
  extends Promise<Pizza | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  img: () => Promise<String>;
  composition: () => Promise<Json>;
  category: <T = CategoryPromise>() => T;
}

export interface Drink {
  id: ID_Output;
  price: Float;
  name: String;
  oz: Float;
  img: String;
}

export interface DrinkPromise extends Promise<Drink>, Fragmentable {
  id: () => Promise<ID_Output>;
  price: () => Promise<Float>;
  name: () => Promise<String>;
  oz: () => Promise<Float>;
  img: () => Promise<String>;
}

export interface DrinkSubscription
  extends Promise<AsyncIterator<Drink>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  price: () => Promise<AsyncIterator<Float>>;
  name: () => Promise<AsyncIterator<String>>;
  oz: () => Promise<AsyncIterator<Float>>;
  img: () => Promise<AsyncIterator<String>>;
}

export interface DrinkNullablePromise
  extends Promise<Drink | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  price: () => Promise<Float>;
  name: () => Promise<String>;
  oz: () => Promise<Float>;
  img: () => Promise<String>;
}

export interface OrderEdge {
  node: Order;
  cursor: String;
}

export interface OrderEdgePromise extends Promise<OrderEdge>, Fragmentable {
  node: <T = OrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderEdgeSubscription
  extends Promise<AsyncIterator<OrderEdge>>,
    Fragmentable {
  node: <T = OrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DessertSubscriptionPayload {
  mutation: MutationType;
  node: Dessert;
  updatedFields: String[];
  previousValues: DessertPreviousValues;
}

export interface DessertSubscriptionPayloadPromise
  extends Promise<DessertSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DessertPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DessertPreviousValuesPromise>() => T;
}

export interface DessertSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DessertSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DessertSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DessertPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface DessertPreviousValues {
  id: ID_Output;
  price: Float;
  name: String;
  img: String;
}

export interface DessertPreviousValuesPromise
  extends Promise<DessertPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  price: () => Promise<Float>;
  name: () => Promise<String>;
  img: () => Promise<String>;
}

export interface DessertPreviousValuesSubscription
  extends Promise<AsyncIterator<DessertPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  price: () => Promise<AsyncIterator<Float>>;
  name: () => Promise<AsyncIterator<String>>;
  img: () => Promise<AsyncIterator<String>>;
}

export interface SizePreviousValues {
  id: ID_Output;
  name: String;
  price: Float;
}

export interface SizePreviousValuesPromise
  extends Promise<SizePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  price: () => Promise<Float>;
}

export interface SizePreviousValuesSubscription
  extends Promise<AsyncIterator<SizePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
}

export interface AggregateDessert {
  count: Int;
}

export interface AggregateDessertPromise
  extends Promise<AggregateDessert>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDessertSubscription
  extends Promise<AsyncIterator<AggregateDessert>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface DrinkSubscriptionPayload {
  mutation: MutationType;
  node: Drink;
  updatedFields: String[];
  previousValues: DrinkPreviousValues;
}

export interface DrinkSubscriptionPayloadPromise
  extends Promise<DrinkSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DrinkPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DrinkPreviousValuesPromise>() => T;
}

export interface DrinkSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DrinkSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DrinkSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DrinkPreviousValuesSubscription>() => T;
}

export interface Size {
  id: ID_Output;
  name: String;
  price: Float;
}

export interface SizePromise extends Promise<Size>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  price: () => Promise<Float>;
}

export interface SizeSubscription
  extends Promise<AsyncIterator<Size>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Float>>;
}

export interface SizeNullablePromise
  extends Promise<Size | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  price: () => Promise<Float>;
}

export interface DrinkPreviousValues {
  id: ID_Output;
  price: Float;
  name: String;
  oz: Float;
  img: String;
}

export interface DrinkPreviousValuesPromise
  extends Promise<DrinkPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  price: () => Promise<Float>;
  name: () => Promise<String>;
  oz: () => Promise<Float>;
  img: () => Promise<String>;
}

export interface DrinkPreviousValuesSubscription
  extends Promise<AsyncIterator<DrinkPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  price: () => Promise<AsyncIterator<Float>>;
  name: () => Promise<AsyncIterator<String>>;
  oz: () => Promise<AsyncIterator<Float>>;
  img: () => Promise<AsyncIterator<String>>;
}

export interface Dessert {
  id: ID_Output;
  price: Float;
  name: String;
  img: String;
}

export interface DessertPromise extends Promise<Dessert>, Fragmentable {
  id: () => Promise<ID_Output>;
  price: () => Promise<Float>;
  name: () => Promise<String>;
  img: () => Promise<String>;
}

export interface DessertSubscription
  extends Promise<AsyncIterator<Dessert>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  price: () => Promise<AsyncIterator<Float>>;
  name: () => Promise<AsyncIterator<String>>;
  img: () => Promise<AsyncIterator<String>>;
}

export interface DessertNullablePromise
  extends Promise<Dessert | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  price: () => Promise<Float>;
  name: () => Promise<String>;
  img: () => Promise<String>;
}

export interface DessertEdge {
  node: Dessert;
  cursor: String;
}

export interface DessertEdgePromise extends Promise<DessertEdge>, Fragmentable {
  node: <T = DessertPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DessertEdgeSubscription
  extends Promise<AsyncIterator<DessertEdge>>,
    Fragmentable {
  node: <T = DessertSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CategoryConnection {
  pageInfo: PageInfo;
  edges: CategoryEdge[];
}

export interface CategoryConnectionPromise
  extends Promise<CategoryConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CategoryEdge>>() => T;
  aggregate: <T = AggregateCategoryPromise>() => T;
}

export interface CategoryConnectionSubscription
  extends Promise<AsyncIterator<CategoryConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CategoryEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCategorySubscription>() => T;
}

export interface OrderSubscriptionPayload {
  mutation: MutationType;
  node: Order;
  updatedFields: String[];
  previousValues: OrderPreviousValues;
}

export interface OrderSubscriptionPayloadPromise
  extends Promise<OrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderPreviousValuesPromise>() => T;
}

export interface OrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderPreviousValuesSubscription>() => T;
}

export interface OrderConnection {
  pageInfo: PageInfo;
  edges: OrderEdge[];
}

export interface OrderConnectionPromise
  extends Promise<OrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderEdge>>() => T;
  aggregate: <T = AggregateOrderPromise>() => T;
}

export interface OrderConnectionSubscription
  extends Promise<AsyncIterator<OrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderSubscription>() => T;
}

export interface OrderPreviousValues {
  id: ID_Output;
  price: Float;
  date: DateTimeOutput;
  status: Float;
  content: Json;
}

export interface OrderPreviousValuesPromise
  extends Promise<OrderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  price: () => Promise<Float>;
  date: () => Promise<DateTimeOutput>;
  status: () => Promise<Float>;
  content: () => Promise<Json>;
}

export interface OrderPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  price: () => Promise<AsyncIterator<Float>>;
  date: () => Promise<AsyncIterator<DateTimeOutput>>;
  status: () => Promise<AsyncIterator<Float>>;
  content: () => Promise<AsyncIterator<Json>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PromoEdge {
  node: Promo;
  cursor: String;
}

export interface PromoEdgePromise extends Promise<PromoEdge>, Fragmentable {
  node: <T = PromoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PromoEdgeSubscription
  extends Promise<AsyncIterator<PromoEdge>>,
    Fragmentable {
  node: <T = PromoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CategoryEdge {
  node: Category;
  cursor: String;
}

export interface CategoryEdgePromise
  extends Promise<CategoryEdge>,
    Fragmentable {
  node: <T = CategoryPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CategoryEdgeSubscription
  extends Promise<AsyncIterator<CategoryEdge>>,
    Fragmentable {
  node: <T = CategorySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PizzaPreviousValues {
  id: ID_Output;
  name: String;
  img: String;
  composition: Json;
}

export interface PizzaPreviousValuesPromise
  extends Promise<PizzaPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  img: () => Promise<String>;
  composition: () => Promise<Json>;
}

export interface PizzaPreviousValuesSubscription
  extends Promise<AsyncIterator<PizzaPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  img: () => Promise<AsyncIterator<String>>;
  composition: () => Promise<AsyncIterator<Json>>;
}

export interface PizzaSubscriptionPayload {
  mutation: MutationType;
  node: Pizza;
  updatedFields: String[];
  previousValues: PizzaPreviousValues;
}

export interface PizzaSubscriptionPayloadPromise
  extends Promise<PizzaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PizzaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PizzaPreviousValuesPromise>() => T;
}

export interface PizzaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PizzaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PizzaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PizzaPreviousValuesSubscription>() => T;
}

export interface DessertConnection {
  pageInfo: PageInfo;
  edges: DessertEdge[];
}

export interface DessertConnectionPromise
  extends Promise<DessertConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DessertEdge>>() => T;
  aggregate: <T = AggregateDessertPromise>() => T;
}

export interface DessertConnectionSubscription
  extends Promise<AsyncIterator<DessertConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DessertEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDessertSubscription>() => T;
}

export interface PizzaEdge {
  node: Pizza;
  cursor: String;
}

export interface PizzaEdgePromise extends Promise<PizzaEdge>, Fragmentable {
  node: <T = PizzaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PizzaEdgeSubscription
  extends Promise<AsyncIterator<PizzaEdge>>,
    Fragmentable {
  node: <T = PizzaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface SizeEdge {
  node: Size;
  cursor: String;
}

export interface SizeEdgePromise extends Promise<SizeEdge>, Fragmentable {
  node: <T = SizePromise>() => T;
  cursor: () => Promise<String>;
}

export interface SizeEdgeSubscription
  extends Promise<AsyncIterator<SizeEdge>>,
    Fragmentable {
  node: <T = SizeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Promo {
  id: ID_Output;
  name: String;
  amount: Int;
}

export interface PromoPromise extends Promise<Promo>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  amount: () => Promise<Int>;
}

export interface PromoSubscription
  extends Promise<AsyncIterator<Promo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  amount: () => Promise<AsyncIterator<Int>>;
}

export interface PromoNullablePromise
  extends Promise<Promo | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  amount: () => Promise<Int>;
}

export interface AggregateOrder {
  count: Int;
}

export interface AggregateOrderPromise
  extends Promise<AggregateOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderSubscription
  extends Promise<AsyncIterator<AggregateOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Json = any;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Category",
    embedded: false
  },
  {
    name: "Promo",
    embedded: false
  },
  {
    name: "Size",
    embedded: false
  },
  {
    name: "Dessert",
    embedded: false
  },
  {
    name: "Drink",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Order",
    embedded: false
  },
  {
    name: "Pizza",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
